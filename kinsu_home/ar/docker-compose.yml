version: '3.8'

services:
  # Servidor Nginx como proxy inverso
  nginx:
    image: nginxproxy/nginx-proxy:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certs:/etc/nginx/certs:rw  # En producción, Lets Encrypt manejará los certificados
      - ./vhost.d:/etc/nginx/vhost.d  # Aquí puedes personalizar configuraciones por dominio
      - ./html:/usr/share/nginx/html  # Archivos HTML estáticos
    environment:
      - DEFAULT_HOST=localhost  # 📌 En producción, usar tu dominio (ej: example.com)

  # Generador de certificados SSL en producción (Lets Encrypt)
  letsencrypt:
    image: nginxproxy/acme-companion
    container_name: letsencrypt
    restart: always
    depends_on:
      - nginx
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # 📌 Asegurar que este volumen está bien montado
      - ./certs:/etc/nginx/certs:rw # Lets Encrypt almacena aquí los certificados en producción
      - ./vhost.d:/etc/nginx/vhost.d
      - ./html:/usr/share/nginx/html
    environment:
      - NGINX_PROXY_CONTAINER=nginx_proxy
      - DEFAULT_EMAIL=tu-email@example.com  # Cambiar en producción
      - LETSENCRYPT_HOST=localhost # En producción, usar tu dominio real
      - LETSENCRYPT_TEST=true  # Quitar en producción para emitir certificados reales


  # Servidor Python para servir archivos estáticos
  python_server:
    image: python:3.9
    container_name: python_server
    working_dir: /app
    volumes:
      - ./html:/app
    command: python -m http.server 8000 --bind 0.0.0.0
    expose:
      - "8000"
    environment:
      - VIRTUAL_HOST=localhost  # En producción, cambiar por el dominio real
      - LETSENCRYPT_HOST=localhost
      - LETSENCRYPT_EMAIL=tu-email@example.com
